name: test

on:
  push:
    branches:
      - 'main'
    paths:
      - '**/*.py'
      - '.github/workflows/test*.yml'
      - 'pyproject.toml'
  pull_request:
    paths:
      - '**/*.py'
      - '.github/workflows/test*.yml'
      - 'pyproject.toml'

jobs:
  style:
    name: check code style
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - uses: actions/setup-python@main
        with:
          python-version: '3.x'
      - uses: actions/cache@main
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: style-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml', 'setup.*') }}
      - run: pip install flake8 black
      # stop the build if there are Python syntax errors or undefined names
      - run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      - run: flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - run: black . --check
  test:
    needs: [ style ]
    name: test Python ${{ matrix.python }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python: [ '3.9', '3.10' ]
    services:
      postgres:
        image: postgis/postgis:13-3.1
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_database
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@main
      - uses: actions/setup-python@main
        with:
          python-version: ${{ matrix.python }}
      - uses: actions/cache@main
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: test-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml', 'setup.*') }}
      - run: |
          sudo apt install libsqlite3-mod-spatialite
          sudo ln -sf /usr/lib/x86_64-linux-gnu/mod_spatialite.so /usr/lib/x86_64-linux-gnu/mod_spatialite
        if: runner.os == 'Linux'
      - run: pip install -e ".[test]" pytest-xdist
        if: steps.cache.outputs.cache-hit != 'true'
      - run: pytest -n auto
        env:
          POSTGRES_HOSTNAME: localhost
          POSTGRES_DATABASE: test_database
          POSTGRES_USERNAME: postgres
          POSTGRES_PASSWORD: test_password
  test_with_coverage:
    needs: [ style, test ]
    name: test with code coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - uses: actions/setup-python@main
        with:
          python-version: '3.x'
      - uses: actions/cache@main
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: test-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml', 'setup.*') }}
      - run: |
          sudo apt install libsqlite3-mod-spatialite
          sudo ln -sf /usr/lib/x86_64-linux-gnu/mod_spatialite.so /usr/lib/x86_64-linux-gnu/mod_spatialite
        if: runner.os == 'Linux'
      - run: pip install -e ".[test]" pytest-cov pytest-xdist
        if: steps.cache.outputs.cache-hit != 'true'
      - run: pytest -n auto --cov . --cov-report xml:coverage.xml
        env:
          POSTGRES_HOSTNAME: localhost
          POSTGRES_DATABASE: test_database
          POSTGRES_USERNAME: postgres
          POSTGRES_PASSWORD: test_password
      - run: coverage report -m
      - uses: codecov/codecov-action@master
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
          fail_ci_if_error: true